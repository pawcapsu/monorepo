# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BookRating {
  _id: String!
  user: Profile!
  book: Book!
  direction: EUserRatingDirection!
  posted: DateTime
}

"""Is it an Like or an Dislike?"""
enum EUserRatingDirection {
  LIKE
  DISLIKE
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type BookChapter {
  _id: String!
  title: String!
  description: UniversalText!
  content: UniversalText!
}

type Book {
  _id: String!
  creator: Profile!
  title: String!
  description: String
  likes: Float!
  dislikes: Float!
  ratings(
    """Is it a Like or a Dislike?"""
    direction: EUserRatingDirection

    """Number of ratings we need to get"""
    limit: Float
  ): [BookRating!]!
  chapters(
    """Number of chapters we need to get"""
    limit: Float
  ): [BookChapter!]!
  chaptersPositions: [String!]!
}

type UniversalText {
  _id: String
  type: EUniversalTextType!
  version: Float
  nodes: [UNodeEntity!]!
}

"""Type of UniversalText instance (TEXT, COMICS, etc...)"""
enum EUniversalTextType {
  TEXT
  COMICS
}

union UNodeEntity = TextNode | PictureNode

type TextNode {
  type: ENodeType!
  index: Float!
  content: String!
}

"""Type of node of UniversalText object (TEXT, PICTURE, etc..)"""
enum ENodeType {
  TEXT
  PICTURE
}

type PictureNode {
  type: ENodeType!
  index: Float!
  caption: String!
  url: String!
}

type Profile {
  _id: String!
  email: String!
  username: String
  books(
    """Number of books we need to get"""
    limit: Float
  ): [Book!]!
}

type PaginatedBooks {
  docs: [Book!]!
  totalDocs: Float!
  limit: Float!
  page: Float
  totalPages: Float!
  nextPage: Float
  prevPage: Float
  pagingCounter: Float!
  hasPrevPage: Boolean!
  hasNextPage: Boolean!
}

type Query {
  me: Profile!
  profile(uid: String!): Profile!
  getChapter: BookChapter!
  book(
    """Book _id"""
    bookId: String!
  ): Book!
  books(
    options: BookSearchOptionsInput!

    """Paginated page"""
    page: Float = 1
  ): PaginatedBooks!
  getText: UniversalText!
  getBookRating(
    """UserRating _id property"""
    ratingId: String!
  ): BookRating!
  getBookRatings(
    """Book _id property"""
    bookId: String!
  ): [BookRating!]!
}

input BookSearchOptionsInput {
  limit: Float!
}

type Mutation {
  createChapter(information: ChapterInformationInput!, bookId: String!): BookChapter!
  updateChapter(information: ChapterInformationInput!, chapterId: String!): BookChapter!
  deleteChapter(chapterId: String!): BookChapter!
  moveChapter(toChapter: String!, fromChapter: String!, bookId: String!): [BookChapter!]!
  login(token: String!): Profile!
  addTextNode(
    """Different options"""
    options: AddNodeOptions
    node: TextNodeInput!
    id: String!
  ): UniversalText!
  modifyTextNode(updatedNode: TextNodeInput!, nodeId: Float!, id: String!): UniversalText!
  deleteNode(nodeId: Float!, id: String!): UniversalText!
  moveNode(toNode: Float!, fromNode: Float!, id: String!): UniversalText!
  postBookRating: BookRating!
}

input ChapterInformationInput {
  title: String!
}

input AddNodeOptions {
  addAfter: Float
}

input TextNodeInput {
  type: String = "TEXT"
  content: String!
}
